(define-library (kallcc new-asm-interpreter)
  (import (scheme base)
          (scheme write)
          (scheme list)
          (scheme process-context)
          (prefix (kallcc misc) kmisc/)
          (onif idebug))
  (export run-interpreter)
  (begin
    (define my-display
      (lambda (x)
        (if (and (vector? x) (eq? (vector-ref x 0) 'CLOSURE))
           'CLOSURE!!!!
          x)))

    (define (%search-next-code code)
      (let loop ((code code))
        (cond
          ((null? code) '())
          ((eq? (caar code) 'DEFUN) code)
          ((eq? (caar code) 'BODY-START) code)
          (else (loop (cdr code))))))

    '(define (%ref addr funs registers global)
      (cond
        ((not-pair? addr) addr)
        ((eq? (car addr) 'R) (vector-ref registers (cadr addr)))
        ((eq? (car addr) 'M2)
         (cond ((assq (cadr addr) funs) => cdr) (else (error "ERROR" addr))))
        ((eq? (car addr) 'G)
         (cond
           ((assq (cadr addr) global) => cdr)
           (else (error "UNDEF GLOBAL VAR!\n"))))
        (else (error "?" addr))))

    (define %ref #f)
    (define (%make-ref-function! global-debug-alist)
      (set! %ref
        (lambda (addr funs registers global)
          (cond
            ((not-pair? addr) addr)
            ((eq? (car addr) 'R) (vector-ref registers (cadr addr)))
            ((eq? (car addr) 'M2)
             (cond ((assq (cadr addr) funs) => cdr) (else (error "ERROR" addr))))
            ((eq? (car addr) 'G)
             (cond
               ((assq (cadr addr) global) => cdr)
               (else
                 (onif-idebug/debug-display global-debug-alist)(newline)
                 (error "UNDEF GLOBAL VAR!\n"
                        (onif-idebug-icode->code (kmisc/rassq (cadr addr) global-debug-alist))))))
            (else (error "?" addr))))))

    (define (%set! addr val funs-box registers global-box)
      (cond
        ((eq? (car addr) 'R)
         (vector-set! registers (cadr addr) val))
        ((eq? (car addr) 'G)
         (set-car! global-box
                   (cons (cons (cadr addr) val)
                         (car global-box))))
        (else (error "!"))))

    (define (move-to-else code key)
      (let loop ((code code))
        (cond
          ((null? code) '())
          ((and (eq? (caar code) 'ELSE)
                (eq? (cadr (car code)) key))
           (cdr code))
          (else (loop (cdr code))))))

    (define (%apply code funs-box registers global-box bp-box global-id-alist)
      (case (caar code)
        ((DEFUN)
         (let ((funs (car funs-box)))
           (set-car! funs-box (cons (cons (cadr (car code)) (cdr code)) funs))
           (%search-next-code (cdr code))))
        ((SET!)
          (let ((a1 (cadr (car code)))
                (a2 (%ref (list-ref (car code) 2) (car funs-box) registers (car global-box))))
            (%set! a1 a2 funs-box registers global-box)
            (cdr code)))
        ((MAKE-CLOSURE)
         (let ((a1 (cadr (car code)))
               (a2 (list-ref (car code) 2))
               (a3 (list-ref (car code) 3)))
           (%set! a3 (vector 'CLOSURE (%ref a1 (car funs-box) registers (car global-box))
                                      (%ref a2 (car funs-box) registers (car global-box)))
                                      funs-box registers global-box)
           (cdr code)))
        ((CLOSURE-ENV)
         (let ((a1 (cadr (car code)))
               (a2 (list-ref (car code) 2)))
          (%set! a2 (vector-ref (%ref a1 (car funs-box) registers (car global-box)) 1) funs-box registers global-box)
          )
         (cdr code))
        ((VECTOR)
          (let* ((a1 (cadr (car code)))
                 (a2 (list-ref (car code) 2))
                 (vec (make-vector (+ (%ref a1 (car funs-box) registers (car global-box)) 1))))
            (vector-set! vec 0 'VECTOR)
            (%set! a2 vec funs-box registers global-box))
         (cdr code))
        ((BYTEVECTOR)
          (let* ((a1 (%ref (cadr (car code)) (car funs-box) registers (car global-box)))
                 (a2 (list-ref (car code) 2))
                 (bv (make-bytevector a1)))
            (%set! a2 bv funs-box registers global-box))
         (cdr code))
        ((CONS)
          (let* ((a1 (cadr (car code)))
                 (a2 (list-ref (car code) 2))
                 (a3 (list-ref (car code) 3))
                 (p (cons (%ref a1 (car funs-box) registers (car global-box)) (%ref a2 (car funs-box) registers (car global-box)))))
            (%set! a3 p funs-box registers global-box))
         (cdr code))
        ((CAR)
         (let* ((a1 (cadr (car code)))
                (a2 (list-ref (car code) 2)))
            (unless (pair? (%ref a1 (car funs-box) registers (car global-box))) (error "Error:Pair required" (%ref a1 (car funs-box) registers (car global-box)) (car code) (cdr code)))
            (%set! a2
                   (car (%ref a1 (car funs-box) registers (car global-box)))
                   funs-box registers global-box))
         (cdr code))
         ((CDR)
         (let* ((a1 (cadr (car code)))
                (a2 (list-ref (car code) 2)))
            (%set! a2
                   (cdr (%ref a1 (car funs-box) registers (car global-box)))
                   funs-box registers global-box))
         (cdr code))

        ((VECTOR-REF)
         (let* ((a1 (cadr (car code)))
                (a2 (list-ref (car code) 2))
                (a3 (list-ref (car code) 3))
                (vec (%ref a1 (car funs-box) registers (car global-box)))
                (index (%ref a2 (car funs-box) registers (car global-box))))

          (unless (eq? (vector-ref vec 0) 'VECTOR)
                  (display (vector-map (lambda (x)  (my-display x)) registers))(newline)
                  (error "INVALID VECTOR!"))
          (when (>= (+ index 1) (vector-length vec))
            (error "Error:index out of range" code (+ index 1) (vector-length vec) vec))
          (%set! a3 (vector-ref vec (+ index 1)) funs-box registers global-box))
         (cdr code))
        ((VECTOR-SET-INIT! VECTOR-SET!)
         (let* ((a1 (cadr (car code)))
                (a2 (list-ref (car code) 2))
                (a3 (list-ref (car code) 3))
                (vec (%ref a1 (car funs-box) registers (car global-box))))
          (unless (eq? (vector-ref vec 0) 'VECTOR)(error "INVALID VECTOR!"))
          (vector-set! vec (+ (%ref a2 (car funs-box) registers (car global-box)) 1) (%ref a3 (car funs-box) registers (car global-box))))
         (cdr code))
        ((VECTOR-LENGTH)
         (let* ((a1 (cadr (car code)))
                (a2 (list-ref (car code) 2)))
            (%set! a2
                   (- (vector-length (%ref a1 (car funs-box) registers (car global-box))) 1)
                   funs-box registers global-box))
         (cdr code))
        ((HALT) '())
        ((BYTEVECTOR-U8-SET!)
         (let* ((a1 (cadr (car code)))
                (a2 (list-ref (car code) 2))
                (a3 (list-ref (car code) 3))
                (bv (%ref a1 (car funs-box) registers (car global-box))))
          (bytevector-u8-set! bv (%ref a2 (car funs-box) registers (car global-box))
                              (%ref a3 (car funs-box) registers (car global-box))))
         (cdr code))
        ((BYTEVECTOR-U8-REF)
         (let* ((a1 (cadr (car code)))
                (a2 (list-ref (car code) 2))
                (a3 (list-ref (car code) 3)))
            (%set! a3
                   (bytevector-u8-ref (%ref a1 (car funs-box) registers (car global-box))
                                      (%ref a2 (car funs-box) registers (car global-box)))
                   funs-box registers global-box))
         (cdr code))
        ((FX-)
         (let* ((a1 (cadr (car code)))
                (a2 (list-ref (car code) 2))
                (a3 (list-ref (car code) 3)))
          (%set! a3
                (- (%ref a1 (car funs-box) registers (car global-box))
                   (%ref a2 (car funs-box) registers (car global-box)))
                   funs-box registers global-box))
         (cdr code))
       ((FX<?)
         (let* ((a1 (cadr (car code)))
                (a2 (list-ref (car code) 2))
                (a3 (list-ref (car code) 3)))
          (%set! a3
                (< (%ref a1 (car funs-box) registers (car global-box))
                   (%ref a2 (car funs-box) registers (car global-box)))
                   funs-box registers global-box))
         (cdr code))
      ((FX=?)
         (let* ((a1 (cadr (car code)))
                (a2 (list-ref (car code) 2))
                (a3 (list-ref (car code) 3)))
          (%set! a3
                (= (%ref a1 (car funs-box) registers (car global-box))
                   (%ref a2 (car funs-box) registers (car global-box)))
                   funs-box registers global-box))
         (cdr code))
      ((FX*)
         (let* ((a1 (cadr (car code)))
                (a2 (list-ref (car code) 2))
                (a3 (list-ref (car code) 3)))
          (%set! a3
                (* (%ref a1 (car funs-box) registers (car global-box))
                   (%ref a2 (car funs-box) registers (car global-box)))
                   funs-box registers global-box))
         (cdr code))
      ((FX+)
         (let* ((a1 (cadr (car code)))
                (a2 (list-ref (car code) 2))
                (a3 (list-ref (car code) 3)))
          (%set! a3
                (+ (%ref a1 (car funs-box) registers (car global-box))
                   (%ref a2 (car funs-box) registers (car global-box)))
                   funs-box registers global-box))
         (cdr code))
      ((FXQUOTIENT)
         (let* ((a1 (cadr (car code)))
                (a2 (list-ref (car code) 2))
                (a3 (list-ref (car code) 3)))
          (%set! a3
                (quotient (%ref a1 (car funs-box) registers (car global-box))
                        (%ref a2 (car funs-box) registers (car global-box)))
               funs-box registers global-box))
         (cdr code))
      ((FXREMAINDER)
         (let* ((a1 (cadr (car code)))
                (a2 (list-ref (car code) 2))
                (a3 (list-ref (car code) 3)))
          (%set! a3
                (modulo (%ref a1 (car funs-box) registers (car global-box))
                        (%ref a2 (car funs-box) registers (car global-box)))
               funs-box registers global-box))
         (cdr code))
      ((IFNOT)
         (let* ((a1 (cadr (car code)))
                (a2 (list-ref (car code) 2))
                (test (%ref a1 (car funs-box) registers (car global-box))))
          (if test
            (move-to-else (cdr code) a2)
            (cdr code))))
     ((BODY-START)
      (set-car! bp-box (%search-next-code (cdr code)))
      (display (car bp-box))(newline)
      (cdr code))
     ((CALL)
     (unless (or (null? (vector-ref registers 0))
                 (eq? (vector-ref (vector-ref registers 0) 0) 'CLOSURE)) (error "CLOSURE!"))
     (if (null? (vector-ref registers 0))
       (car bp-box)
       (vector-ref (vector-ref registers 0) 2)))
    ((COMMENT) (cdr code))
    (else (display "!")(display (car code))(newline) (exit))))

    (define (run-interpreter code global-id-alist)
      (%make-ref-function! global-id-alist)
      (let ((funs-box (list '()))
            (global-box (list '()))
            (registers (make-vector 256))
            (bp-box (list '())))
        (let loop ((code code))
          (unless (null? code)
            ;(display (car code))(newline)
            (loop (%apply code funs-box registers global-box bp-box global-id-alist))))

        (display "RES (R 2) = ")(display (vector-ref registers 2))(newline)
        ))))
